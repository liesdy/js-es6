/**
 * split
 * 
 * 英文语义 分裂， 使分裂(成不同的派别);
 分开， 使分开(成为几个部分);
 分担;
 分摊;
 分享;
 */

// 首先split方法是字符串上的， 把字符串拆分成数组

 // string.split(separator,limit)

// separator 可选。 字符串或正则表达式， 从该参数指定的地方分割 string Object。
// limit 可选。 该参数可指定返回的数组的最大长度。 如果设置了该参数， 返回的子串不会多于这个参数指定的数组。 如果没有设置该参数， 整个字符串都会被分割， 不考虑它的长度。

// split方法按照给定规则分割字符串， 返回一个由分割出来的子字符串组成的数组。
'a|b|c'.split('|') // ["a", "b", "c"]

// 如果分割规则为空字符串， 则返回数组的成员是原字符串的每一个字符。
'a|b|c'.split('') // ["a", "|", "b", "|", "c"]

// 如果省略参数， 则不进行分割，直接把原字符串塞进一个空数组，成为一个只有字符串元素的数组。
'a|b|c'.split() // ["a|b|c"]

// 如果满足分割规则的两个部分紧邻着（ 即两个分割符中间没有其他字符）， 则返回数组之中会有一个空字符串。
'a||c'.split('|') // ['a', '', 'c']

// 如果满足分割规则的部分处于字符串的开头或结尾（ 即它的前面或后面没有其他字符）， 则返回数组的第一个或最后一个成员是一个空字符串。
'|b|c'.split('|') // ["", "b", "c"]
'a|b|'.split('|') // ["a", "b", ""]

// split方法还可以接受第二个参数， 限定返回数组的最大成员数。
'a|b|c'.split('|', 0) // []
'a|b|c'.split('|', 1) // ["a"]
'a|b|c'.split('|', 2) // ["a", "b"]
'a|b|c'.split('|', 3) // ["a", "b", "c"]
'a|b|c'.split('|', 4) // ["a", "b", "c"]

// 不会改变原字符串
let a = 'test'
a.split('')
//["t", "e", "s", "t"]
a // 'test'

// split方法还可以使用正则表达式作为参数， 详见《 正则表达式》 一节。



/**
 * slice
 * 英文语义  切  划   割
 * 发音[slaɪs]
 */
// slice方法用于提取目标数组的一部分， 返回一个新数组， 原数组不变。
var a = ['a', 'b', 'c'];

a.slice(0) // ["a", "b", "c"]
a.slice(1) // ["b", "c"]
a.slice(1, 2) // ["b"]
a.slice(2, 6) // ["c"]
a.slice() // ["a", "b", "c"]
// 上面代码中， 最后一个例子slice没有参数， 实际上等于返回一个原数组的拷贝。

// 如果slice方法的参数是负数， 则表示倒数计算的位置。
var a = ['a', 'b', 'c'];
a.slice(-2) // ["b", "c"]
a.slice(-2, -1) // ["b"]

// 如果第一个参数大于等于数组长度， 或者第二个参数小于第一个参数， 则返回空数组。
var a = ['a', 'b', 'c'];
a.slice(4) // []
a.slice(2, 1) // []

// slice方法的一个重要应用， 是将类似数组的对象转为真正的数组。
Array.prototype.slice.call({
  0: 'a',
  1: 'b',
  length: 2
})
// ['a', 'b']

Array.prototype.slice.call(document.querySelectorAll("div"));
Array.prototype.slice.call(arguments);
// 上面代码的参数都不是数组， 但是通过call方法， 在它们上面调用slice方法， 就可以把它们转为真正的数组。
// !黎姐
// 因为call方法是改变方法内部this的指向后再执行这个方法
// 而默认的this是指向方法所在的环境
// 比如obj1.fun()中间的this是指向的 obj1 。相当于执行了obj1内部的fun方法
// obj1.fun.call(obj2) 将this改成obj2之后，其实也就相当于把fun放进了obj2中并执行
// 相当于是给obj2 临时的 赋予了这个方法
// 根据这个理论
// 自己进行测试的例子
let obj1 = {
  a: '22',
  test: function () {
    console.log('a: ', this.a);
  }
}  
let obj2 = {
  a: '33'
}
obj1.test.call(obj2)
// 33
obj2 // { a: '33' }
// 可见方法执行结束之后，obj2并没有改变，内部也没有加上test方法

/**
 * splice()
 * 英文语义 
 * 绞接， 捻接(两段绳子);胶接， 粘接(胶片、 磁带等);
 * 发音[splaɪs]
 */
// splice方法用于删除原数组的一部分成员， 并可以在删除的位置添加新的数组成员， 返回值是被删除的元素。 注意， 该方法会改变原数组。
// arr.splice(start, count, addElement1, addElement2, ...);
var a = ['a', 'b', 'c', 'd', 'e', 'f'];
a.splice(4, 2, 1, 2) // ["e", "f"]
a // ["a", "b", "c", "d", 1, 2]

// 起始位置如果是负数， 就表示从倒数位置开始删除。
var a = ['a', 'b', 'c', 'd', 'e', 'f'];
a.splice(-4, 2) // ["c", "d"]

// 如果只是单纯地插入元素， splice方法的第二个参数可以设为0。
var a = [1, 1, 1];
a.splice(1, 0, 2) // []
a // [1, 2, 1, 1]

// 如果只提供第一个参数，则从第一个参数的位置开始一直到结尾都会被切下来并返回，等同于将原数组在指定位置拆分成两个数组。
var a = [1, 2, 3, 4];
a.splice(2) // [3, 4]
a // [1, 2]

// ps，测试下string是否有splice的方法
let a = 'test'
a.splice(2)
// 报错，证明string并没有splice的方法，即使string相当于特殊形式的数组